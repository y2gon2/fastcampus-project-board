debug: false
management.endpoints.web.exposure.include: "*"

logging:
  level:
    com.fastcampus.projectboard: debug
    org.springframework.web.servlet: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace

spring:
  # 아래 vault 설정을 사용한 key value pair 로 아래 datasouce 의 url, username, password 를 환경변수로 저장하지않고,
  # 보안기능이 강화된 vault cloud 기능을 사용하여 작업을 진행 할 수 있다.
  # 그러나 현재 Heroku 에서 vault 를 사용하지 않기 때문에 해당 설정은 주석 처리하여 비활성화 함
#  application.name: fastcampus-board # vault 사용하여 생성한 secret/fastcampus-board key-value pair 저장소 이름
#  cloud.vault:
#      scheme: http
#      authentication: TOKEN
#      token: ${VAULT_TOKEN}   # Root Token: hvs.8fCdxxxEXSoFzL7ij19xxxxx  과 같이 vault server 생성 token 사용
#  config.import: vault://     # https://docs.spring.io/spring-cloud-vault/docs/current/reference/html/

  datasource:
    url: ${LOCAL_DB_URL}
    username: ${LOCAL_DB_USERNAME}
    password: ${LOCAL_DB_PASSWORD}

#    url: jdbc:h2:mem:testdb
#    username: sa
#    driver-class-name: org.h2.Driver
    # log 화면상 아래 내용 출력 확인
    # -> INFO 17032 --- [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
    # http://localhost:8080/h2-console 접속 및 확인
  jpa:
    # 2023-09-21 11:25:41.334  WARN 6168 --- [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default.
    #       Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    # -> OSIV (Open Session In View)
    #    Repository 가 Domain data 를 가저와서 Service 로 전달
    #    -> data 를 DTO 로 바꿔서 controller 에 넘겨줌
    #    -> Controller 가  view info 및 model 을 DispatcherServlet (Filter Interceptor) 에 전달 하여 client response 진행
    #
    #   위 과정에서 보면 Transacton 의 session (Hibernate 에 의해 생성된) 의 작업은 service - controller 관계에서만 필요하다.
    #   그런데 open session in view 는 필요한 layer 이외 범위에서 (ex. service - repository) 에서도 Hibernate session 이 살아 있다.
    #   이러한 경우 session 을 매번 다시 생성하지 않아도 되기 때문에 개발에  편의성은 높아진다. (Lazy laading 활용이 용이)
    #   다만, 그러나 session 이 의도하지 않은 범위까지 살아 있으므로 설계 의도의 적합성에는 맞지 않을 수 있다.
    #   또한, DB connection 을 계속 잡고 있으므로써, 많은 트래픽 처리에서 성능 문제가 발생할 수 있다.
    open-in-view: false # or true (둘중 하나로 결정만 하면 warning 제거) default : true
    defer-datasource-initialization: true
    hibernate.ddl-auto: create
    show-sql: true
    properties:
      hibernate.format_sql: true
      hibernate.default_batch_fetch_size: 100
#  h2.console.enabled: true
  sql.init.mode: always

  # Spring data REST
  # spring data repository 를 자동으로 RESTful service 로 노출 시킬수 있게 만들어주는 라이브러리
  # 기존의 MVC pattern 에서 sprind data REST 를 사용하면 controller 와 model 의 구현 작업을 해당 라이브러리에서 내부적으로 처리되므로
  # DB CRUD 작업과 client REST 에서 처리되어야 할 data 처리과정이 단순한 경우 Spring data REST 를 사용하는 것이 작업량을 줄이는데 도움이 되지만
  # 그외 경우 직접 controller / model 을 작성하는 것이 나을 수 있음.
  # by ChatGPT
  # Spring Data REST는 CRUD 연산을 자동화하여 빠르게 RESTful API를 생성해 주는 장점이 있지만,
  # 복잡한 데이터 변환이나 비즈니스 로직이 필요한 경우에는 그러한 상황을 완벽하게 처리하기 어렵습니다.
  # 다음은 Spring Data REST를 사용할 때 고려해야 할 몇 가지 제약사항과 단점입니다:
  #
  # 복잡한 로직:
  # Spring Data REST는 기본적으로 간단한 CRUD 연산을 자동으로 처리해주지만,
  # 복잡한 비즈니스 로직이나 데이터 변환을 위해서는 별도의 컨트롤러를 구현해야 할 수 있습니다.
  #
  # 유연성 부족
  # 자동 생성된 API는 특정 규칙에 따라 만들어지므로, 원하는 엔드포인트 이름, 데이터 형식 등을 세밀하게 조정하기 어렵습니다.
  #
  # 보안
  # Spring Data REST는 자동으로 API를 노출시키기 때문에, 보안 적용을 따로 해주어야 하며 이를 놓치게 되면 심각한 보안 문제가 발생할 수 있습니다.
  #
  # 성능
  # 자동 생성된 API는 최적화되지 않았을 가능성이 있으므로, 특히 큰 데이터셋에서는 성능 이슈가 발생할 수 있습니다.
  #
  # 커스터마이징의 한계
  # Spring Data REST를 사용하면서 커스터마이징을 하려면, 여러 설정과 확장 포인트를 잘 알고 있어야 합니다. 그렇지 않으면 원하는 동작을 쉽게 구현하기 어렵습니다.
  #
  # 따라서, 데이터 구조의 변환이 복잡하거나 추가적인 서버 측 로직이 필요한 경우에는 Spring Data REST보다는
  # 일반적인 Spring MVC와 JPA, MongoDB 등을 직접 사용하여 API를 구현하는 것이 더 유연하고 제어력이 높을 수 있습니다.
  data.rest:
    base-path: /api

    # 우리가 가진 repository 를 확인하는데 해당 repository  를 REST 노출을 시킬것인가 에 대한 전략
    detection-strategy: annotated

  thymeleaf3:
    decoupled-logic: true # by ThymeleafConfig class
  security:
    oauth2:
      client:
        registration: # oauth provider infomation
          kakao:
            client-id: ${KAKAO_OAUTH_CLIENT_ID}         # spirng boot 외부 환경 변수 주입으로 해당 값 입력을 처리하면,
            client-secret: ${KAKAO_OAUTH_CLIENT_SECRET} # app 실행 시, spring boot 이  해당 setting 값을 넣고 실행하기 때문에 해당 설정을 삭제해도 동일하게 실행됨.(생략 가능은 local 배포인 경우만)
            authorization-grant-type: authorization_code

            # redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            # provider 를 통해서 인증이 되면 내 app 으로 돌아올 uri
            # 그러나 나의 uri 를 그대로 노출 시키고 싶지 않다면
            # https://docs.spring.io/spring-security/reference/servlet/oauth2/login/core.html
            # {baseUrl}/login/oauth2/code/{registrationId}
            # baseUrl 을 spring boot 가 알아서 치환
            # {} 이 yaml 파일에서 특수 기호로 인식되기 때문에 해당 요소 때문에 다르게 인식되는 것을 막기 위해 "" 로 묶음
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"

            # 인증 서버에 요청을 넣어줄 때, 그 API 를 호출 할 HTTP method 까지 지정 (OAuth provider 의 공식문서에서 요구하는 대로 지정해줘야)
            # https://developers.kakao.com/docs/latest/ko/kakaologin/rest-api
            client-authentication-method: POST
        provider:
          kakao:
            # https://developers.kakao.com/docs/latest/ko/kakaologin/rest-api
            authorization-uri: https://kauth.kakao.com/oauth/authorize    # 인증 (권한 받을 때)
            token-uri: https://kauth.kakao.com/oauth/token           # 토큰 갱신
            user-info-uri: https://kapi.kakao.com/v2/user/me        # 설정된 사용자 정보를 받아오는 (만약 자체 DB 에 저장하지 않는다면 필요할 때마다 가져와야함.)
            user-name-attribute: id     # 받아온 인증 정보에는 다양한 property 들이 있을 텐데 그중 'id' 식별자 정보로 사용하겠다. (kakao 의 경우 응답 message 중 회원번호 id)
#---
#
#spring:
#  config.activate.on-profile: testdb
#  datasource:
#    url: jdbc:h2:mem:board;mode=mysql # mySQL mode 로 사용 (참고 : https://www.h2database.com/)
#    driverClassName: org.h2.Driver
#  sql.init.mode: always
#  test.database.replace: none
  # @ActiveProfiles("testdb") annotation 으로 test 에서 해당 setting 을 사용하려고 하지만
  # @DataJpaTest 를 적용하면 JPA 가 앞의 설정 조건을 무시하고 무조건 자체 setting 으로 진행을 해벼림
  # @AutoConfigureTestDatabse(replace = AutoConfigureTestDatabase.Replace.NONE) 사용
  # 그러면 Testdb 를 다시 설정하지 않고, 앞에 setting 된 db 를 그대로 사용할 수 있게 됨.
  # 그런데 해당 annotation 은 각 test class 에 매번 설정해줘야 한다.
  # 따라서 이 기능을 모든 test 에 전역적으로 사용하고 싶을 때
  # test.database.replace: none 으로 설정

---

spring:
  config.activate.on-profile: heroku
  datasource:
    url: ${JAWSDB_URL}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa.hibernate.ddl-auto: create
  sql.init.mode: always